plugins {
    id 'eclipse'
    id 'idea'
    id 'maven-publish'
    id "me.shedaniel.unified-publishing" version "0.1.+"
    id 'net.neoforged.gradle.userdev' version '7.0.145'
    id 'net.neoforged.gradle.mixin' version '7.0.145'
}

tasks.named('wrapper', Wrapper).configure {
    // Define wrapper values here so as to not have to always do so when updating gradlew.properties.
    // Switching this to Wrapper.DistributionType.ALL will download the full gradle sources that comes with
    // documentation attached on cursor hover of gradle classes and methods. However, this comes with increased
    // file size for Gradle. If you do switch this to ALL, run the Gradle wrapper task twice afterwards.
    // (Verify by checking gradle/wrapper/gradle-wrapper.properties to see if distributionUrl now points to `-all`)
    distributionType = Wrapper.DistributionType.BIN
}

version = "${minecraft_version}-NeoForge-${mod_version}"
group = "${maven_group}" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
var realVersion = project.mod_version + '+neoforge'

base {
    archivesName = archives_base_name
}

java.toolchain.languageVersion = JavaLanguageVersion.of(21)
println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))

// Default run configurations.
// These can be tweaked, removed, or duplicated as needed.
runs {
    // applies to all the run configs below
    configureEach {
        // Recommended logging data for a userdev environment
        // The markers can be added/remove as needed separated by commas.
        // "SCAN": For mods scan.
        // "REGISTRIES": For firing of registry events.
        // "REGISTRYDUMP": For getting the contents of all registries.
        systemProperty 'forge.logging.markers', 'REGISTRIES'

        // Recommended logging level for the console
        // You can set various levels here.
        // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
        systemProperty 'forge.logging.console.level', 'debug'

        modSource project.sourceSets.main
    }

    client {
        // Comma-separated list of namespaces to load gametests from. Empty = all namespaces.
        systemProperty 'forge.enabledGameTestNamespaces', project.mod_id
    }

    server {
        systemProperty 'forge.enabledGameTestNamespaces', project.mod_id
        programArgument '--nogui'
    }

    // This run config launches GameTestServer and runs all registered gametests, then exits.
    // By default, the server will crash when no gametests are provided.
    // The gametest system is also enabled by default for other run configs under the /test command.
    gameTestServer {
        systemProperty 'forge.enabledGameTestNamespaces', project.mod_id
    }

    data {
        // example of overriding the workingDirectory set in configureEach above, uncomment if you want to use it
        // workingDirectory project.file('run-data')

        // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
        programArguments.addAll '--mod', project.mod_id, '--all', '--output', file('src/generated/resources/').getAbsolutePath(), '--existing', file('src/main/resources/').getAbsolutePath()
    }
}

repositories {
//    maven {
//        // location of the maven that hosts JEI files
//        name = "Progwml6 maven"
//        url = "https://dvs1.progwml6.com/files/maven/"
//    }
//    maven {
//        // location of a maven mirror for JEI files, as a fallback
//        name = "ModMaven"
//        url = "https://modmaven.dev"
//    }
//    flatDir {
//        dir 'libs'
//    }
    maven { url "https://maven.shedaniel.me/" }
    maven {
        url = "https://www.cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }
    maven {
        url = "https://api.modrinth.com/maven"
    }
}

mixin {
    config "${mod_id}.mixins.json"
}

dependencies {
    // Specify the version of Minecraft to use. If this is any group other than 'net.minecraft', it is assumed
    // that the dep is a ForgeGradle 'patcher' dependency, and its patches will be applied.
    // The userdev artifact is a special name and will get all sorts of transformations applied to it.
    implementation "net.neoforged:neoforge:${neo_version}"
//    compileOnly(annotationProcessor("io.github.llamalad7:mixinextras-common:0.3.2"))

    implementation "dev.architectury:architectury-neoforge:${project.architectury_version}"
    implementation "me.shedaniel.cloth:cloth-config-neoforge:${project.cloth_config_version}"
//    implementation "me.shedaniel:RoughlyEnoughItems-forge:${project.rei_version}"
//    compileOnly "me.shedaniel:REIPluginCompatibilities-forge-annotations:12.+"

    implementation "maven.modrinth:farmers-delight:1.21-1.2.4"
    //implementation "curse.maven:jei-238222:4175833"
    implementation "maven.modrinth:jade:15.1.5+neoforge"
//    implementation "maven.modrinth:kiwi:dHXtj93x"
//    implementation "libs:Kiwi-1.20.1-forge:11.5.0"
//    annotationProcessor "libs:Kiwi-1.20.1-forge:11.5.0"
    implementation "maven.modrinth:suggestion-tweaker:1.20.6-1.5.2+neoforge"
}

jar {
    manifest {
        attributes(["Specification-Title"     : mod_id,
                    "Specification-Version"   : "1", // We are version 1 of ourselves
                    "Implementation-Title"    : project.name,
                    "Implementation-Version"  : realVersion,
                    "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")])
    }

    preserveFileTimestamps = false
    reproducibleFileOrder = true
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/mcmodsrepo"
        }
    }
}

unifiedPublishing {
    project {
        displayName = "[NeoForge $project.supported_version] $project.mod_version"
        version = realVersion // Optional, Inferred from project by default
        changelog = file("CHANGELOG.md").exists() ? file("CHANGELOG.md").text : "" // Optional, in markdown format
        releaseType = project.release_type // Optional, use "release", "beta" or "alpha"
        gameVersions = ["1.21"]
        gameLoaders = ["neoforge"]

        mainPublication tasks.jar // Declares the publicated jar

        if (System.getenv("CURSE_TOKEN") != null) {
            curseforge {
                token = System.getenv("CURSE_TOKEN")
                id = "964282" // Required, must be a string, ID of CurseForge project

                relations { // Optional, Inferred from the relations above by default
                    depends "farmers-delight"
                }
            }
        }

        if (System.getenv("MODRINTH_TOKEN") != null) {
            modrinth {
                token = System.getenv("MODRINTH_TOKEN")
                id = "HY0PMpa3" // Required, must be a string, ID of Modrinth project

                relations { // Optional, Inferred from the relations above by default
                    depends "farmers-delight"
                }
            }
        }
    }
}
